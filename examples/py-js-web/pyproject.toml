[build-system]
build-backend = "flit_core.buildapi"
requires = ["flit_core<4,>=3.7.1"]

[project]
name = "example-web"
version = "0.1.0"
description = "an example web application"
readme = "README.md"
authors = [{name = "doitoml contributors", email = "deathbeds@googlegroups.com"}]
requires-python = ">=3.8"
classifiers = [
  "License :: OSI Approved :: BSD License",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3",
]
dependencies = ["fastapi"]
[project.urls]
"Source" = "https://github.com/deathbeds/doitoml/tree/main/examples/py-js-web"

[tool.doit]
default_tasks = ["backend:dist"]
loader = "doitoml"
par_type = "thread"
verbosity = 2

[tool.doit.commands.list]
status = true
subtasks = true

[tool.doitoml]
config_paths = ["./package.json"]
prefix = "backend"

[tool.doitoml.env]
EXAMPLE_PY_VERSION = ":get::toml::pyproject.toml::project::version"
EXAMPLE_DEPS = ":get::yaml::environment.yml::dependencies"

[tool.doitoml.paths]
all_dist = ["::whl", "::sdist", "::dist_tgz"]
dist_hash = ["dist/SHA256SUMS"]
dist_tgz = ["dist/${EXAMPLE_JS_DIST}"]
env_yml = ["./environment.yml"]
license = ["./LICENSE"]
ppt = ["./pyproject.toml"]
py_src = [":rglob::src::*.py"]
readme = ["./README.md"]
sdist = ["dist/example-web-${EXAMPLE_PY_VERSION}.tar.gz"]
venv = ["./.venv"]
venv_history = ["./.venv/conda-meta/history"]
whl = ["dist/example_web-${EXAMPLE_PY_VERSION}-py3-none-any.whl"]
yarn_py = ["_yarn.py"]

[tool.doitoml.tokens]
conda_run = ["conda", "run", "--live-stream", "--prefix", "::venv"]
pyproject_build = ["::conda_run", "pyproject-build"]
yarn_exe = ["::conda_run", "python", "::yarn_py"]

[tool.doitoml.tasks.setup.env]
actions = [
  [
    "${CONDA_EXE}",
    "env",
    "update",
    "--file",
    "::env_yml",
    "--prefix",
    "::venv",
  ],
]
file_dep = ["::env_yml"]
targets = ["::venv_history"]

[tool.doitoml.tasks.dist.wheel]
actions = [["::pyproject_build", "--no-isolation"]]
file_dep = [
  "::venv_history",
  "::readme",
  "::license",
  "::ppt",
  "::py_src",
  "::frontend::dist_html",
]
targets = ["::whl"]

[tool.doitoml.task.dist.js]
actions = [{py = {"shutil:copy2" = {args = ["::js::dist_tgz", "::dist_tgz"]}}}]
file_dep = ["::js::dist_tgz"]
targets = ["::dist_tgz"]

[tool.doitoml.tasks.build.hashfile]
actions = [
  {py = {"my_custom._actions:hash_files" = {kwargs = {hashfile = [
    "::dist_hash",
  ], files = [
    "::all_dist",
  ]}}}},
  {py = {"my_custom._actions:hash_files" = {args = [
    "::dist_hash",
    "::all_dist",
  ]}}},
]
file_dep = ["::all_dist"]
targets = ["::dist_hash"]

[tool.__doitoml_tests__.steps.00_list]
after = {files = {"*" = 9}}
before = {files = {"**/*" = 16, "*" = 9}}
rc = 0
run = ["doit", "list"]
tasks = 10
skip_os = ["nt"]

[tool.__doitoml_tests__.steps.01_run]
rc = 0
run = ["doit"]

[tool.__doitoml_tests__.steps.01_run.after.files]
"*" = 12
"yarn.lock" = 1
"dist/*.tar.gz" = 1
"dist/*.whl" = 1
"dist/SHA256SUMS" = 1
