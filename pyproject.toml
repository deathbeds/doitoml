[build-system]
build-backend = "flit_core.buildapi"
requires = ["flit_core<4,>=3.7.1"]

[project]
name = "doitoml"
version = "0.1.0"
description = "Load declarative tasks for doit from TOML, JSON, YAML, and other files."
readme = "README.md"
authors = [{name = "doitoml contributors", email = "deathbeds@googlegroups.com"}]
requires-python = ">=3.8"
classifiers = [
  "License :: OSI Approved :: BSD License",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3",
]
dependencies = ["doit", "jinja2", "tomli", "typing-extensions"]
[project.optional-dependencies]
json-e = ["json-e"]
jsonschema = ["jsonschema[format]"]
yaml = ["pyyaml"]
[project.urls]
"Bug Tracker" = "https://github.com/deathbeds/doitoml/issues"
"Changelog" = "https://github.com/deathbeds/doitoml/blob/main/CHANGELOG.md"
"Documentation" = "https://doitoml.rtfd.io"
"PyPI" = "https://pypi.org/project/doitoml"
"Source" = "https://github.com/deathbeds/doitoml/tree/main"
[project.entry-points."doit.LOADER"]
doitoml = "doitoml.loaders:DoitomlLoader"
[project.entry-points."doitoml.actor.v0"]
py = "doitoml.actors:PyActor"
[project.entry-points."doitoml.config-parser.v0"]
doitoml-package-json = "doitoml.sources.json.package:PackageJsonParser"
doitoml-pyproject-toml = "doitoml.sources.toml.pyproject:PyprojectTomlParser"
[project.entry-points."doitoml.dsl.v0"]
doitoml-colon-colon-path = "doitoml.dsl:PathRef"
doitoml-colon-get = "doitoml.dsl:Getter"
doitoml-colon-glob = "doitoml.dsl:Globber"
doitoml-dollar-env = "doitoml.dsl:EnvReplacer"
[project.entry-points."doitoml.parser.v0"]
json = "doitoml.sources.json._json:JsonParser"
toml = "doitoml.sources.toml._toml:TomlParser"
yaml = "doitoml.sources.yaml._yaml:YamlParser"
[project.entry-points."doitoml.templater.v0"]
json-e = "doitoml.templaters.jsone:JsonE"

[tool.pytest.ini_options]
cache_dir = "build/.cache/pytest"
script_launch_mode = "subprocess"
addopts = [
  # for humans
  "--html=build/reports/pytest.html",
  "--self-contained-html",
  "--cov-report=html:build/reports/htmlcov",
  "--cov-report=term-missing:skip-covered",
  "--color=yes",
  # for robots
  "--json-report",
  "--json-report-file=build/reports/pytest.json",
  # xdist
  "-n=auto",
  "--dist=worksteal",
  # cov
  "--cov=doitoml",
  "--cov-branch",
  "--cov-context=test",
  "--cov-fail-under=100",
  "--no-cov-on-fail",
  # misc
  "-vv",
  "--ff",
  "--tb=long",
]

[tool.coverage.html]
show_contexts = true

[tool.coverage.report]
exclude_lines = [
  "except ImportError as err:",
  "except MissingDependencyError as err:",
  "if TYPE_CHECKING:",
  "pragma: no cover",
]
[tool.coverage.run]
data_file = "build/reports/coverage/.coverage"

[tool.mypy]
cache_dir = "build/.cache/mypy"
sqlite_cache = true
# language settings
python_version = "3.8"
allow_redefinition = true
check_untyped_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
show_error_codes = true
warn_return_any = true
warn_unused_ignores = true
overrides = [
  {module = [
    "doit",
    "doit.*",
    "tomllib",
    "jsone",
  ], ignore_missing_imports = true},
]

[tool.doit]
backend = "sqlite3"
verbosity = 2
par_type = "thread"

[tool.doit.commands.list]
status = true
subtasks = true

[tool.ruff]
# fix = true
ignore = [
  "D211",
  "D213",
  # if it doesn't bother mypy...
  "ANN101",
  "ANN401",
  "PGH003",
  # keep 3.8 compat
  "UP006",
  "UP007",
]
cache-dir = "build/.cache/ruff"
select = [
  "A",
  "ANN",
  "ARG",
  "B",
  "BLE",
  "C4",
  "C90",
  "COM",
  "D",
  "DJ",
  "DTZ",
  "E",
  "EM",
  "ERA",
  "EXE",
  "F",
  # "FBT",
  "G",
  "I",
  "ICN",
  "INP",
  "ISC",
  "N",
  "NPY",
  "PD",
  "PGH",
  "PIE",
  "PL",
  "PT",
  "PTH",
  "PYI",
  "Q",
  "RET",
  "RSE",
  "RUF",
  "S",
  "SIM",
  "SLF",
  "T10",
  "T20",
  "TCH",
  "TID",
  # "TRY",
  "UP",
  "W",
  "YTT",
]
[tool.ruff.per-file-ignores]
"_config.py" = ["PLR0912", "C901", "PLR0913"]
"_source.py" = ["BLE001"]
"constants.py" = ["N801"]
"docs/conf.py" = ["INP001", "A001"]
"dodo.py" = ["BLE001"]
"dsl.py" = ["ARG002"]
"doitoml.py" = ["PLR0913"]
"entry_points.py" = ["BLE001"]
"test/**/*.py" = ["S101", "T201", "T203"]

[tool.doitoml]
prefix = ""
config_paths = [":get::json::js/package.json::doitoml"]

[tool.doitoml.env]
BLACK_CACHE_DIR = "./build/.cache/black"
DOITOML_SDIST = "doitoml-${DOITOML_VERSION}.tar.gz"
DOITOML_VERSION = ":get::toml::pyproject.toml::project::version"
DOITOML_WHEEL = "doitoml-${DOITOML_VERSION}-py3-none-any.whl"
PIP_DOWNLOAD_CACHE = "./build/.cache/pip"
RUST_LOG = "error"

[tool.doitoml.cmd]
sphinx_opts = ["-b", "html", "docs", "build/docs"]
taplo_opts = [
  "--option=array_auto_collapse=true",
  "--option=compact_inline_tables=true",
  "--option=column_width=88",
]
check_links_opts = [
  "--check-links-ignore=https://",
  "--no-cov",
  "--check-anchors",
  "--html=build/reports/pytest-check-links.html",
  "-p",
  "no:importnb",
  "--json-report-file=build/reports/pytest-check-links.json",
  "--tb=no",
]

[tool.doitoml.paths]
whl = ["dist/${DOITOML_WHEEL}"]
sdist = ["dist/${DOITOML_SDIST}"]
all_dist = ["::whl", "::sdist"]
dist_hash = ["dist/SHA256SUMS"]
docs_py = ["docs/conf.py"]
docs_etc = [":rglob::docs/_static::*.*", ":rglob::docs/_templates::*.*"]
all_py = ["dodo.py", "_actions.py", "::py_src", "::all_py_test", "::docs_py"]
py_src = [":rglob::src::*.py"]
all_ipynb = [":rglob::docs::*.ipynb::!ipynb_checkpoints"]
all_py_test = [":rglob::test::*.py"]
ppt = ["pyproject.toml"]
all_ppt = ["::ppt", ":glob::examples::*/pyproject.toml"]
all_schema_toml = [":rglob::src/doitoml::*.toml"]
all_toml = ["::all_ppt", "::all_schema_toml"]
all_py_dist = ["::ppt", "::py_src", "README.md", "LICENSE.txt"]
_actions = ["_actions.py"]
_ex_actions = ["examples/py-js-web/my_custom/_actions.py"]
_tmpl_actions = ["examples/template-json-e/_actions.py"]
all_examples = [
  ":glob::examples/py-js-web::*.json::*.toml::*.yml::*.py::*.js",
  ":rglob::examples/py-js-web/src::*.*",
  ":rglob::examples/py-js-web/js::*.*",
  "::all_ppt",
]
all_md = [":glob::.::*.md", ":rglob::docs::*.md::!ipynb_checkpoints"]
docs_buildinfo = ["build/docs/.buildinfo"]

[tool.doitoml.tasks.build.pypi]
doc = "Build distributions for PyPI"
file_dep = ["::all_py_dist"]
targets = ["::whl", "::sdist"]
actions = [["pyproject-build", "-nx"]]

[tool.doitoml.tasks.build.hashfile]
doc = "Generate a hashfile"
file_dep = ["::whl", "::sdist"]
targets = ["::dist_hash"]
actions = [
  {py = "_actions:hash_files", args = {hashfile = "::dist_hash", files = "::all_dist"}},
]

[tool.doitoml.tasks.fix.ssort]
doc = "Predictably order python source with `ssort`"
file_dep = ["::ppt", "::all_py"]
task_dep = ["js:fix:prettier"]
actions = [["ssort", "::all_py"]]

[tool.doitoml.tasks.fix.black]
doc = "Format python source with `black`"
file_dep = ["::ppt", "::all_py"]
task_dep = ["fix:ssort"]
actions = [["black", "--quiet", "::all_py"]]

[tool.doitoml.tasks.fix.ruff]
doc = "Format python source with `ruff`"
file_dep = ["::ppt", "::all_py"]
task_dep = ["fix:black"]
actions = [["ruff", "--fix", "::all_py"]]

[tool.doitoml.tasks.fix.toml]
doc = "Format pyproject.toml with pyproject-fmt and taplo"
file_dep = ["::all_toml"]
actions = [
  [
    "pyproject-fmt",
    "::all_toml",
  ],
  [
    "taplo",
    "fmt",
    "::taplo_opts",
    "::all_toml",
  ],
]

[tool.doitoml.tasks.lint.black]
doc = "Check python formatting with `black`"
file_dep = ["::ppt", "::all_py"]
actions = [["black", "--quiet", "--check", "::all_py"]]

[tool.doitoml.tasks.lint.ruff]
doc = "Check python syntax with `ruff`"
file_dep = ["::ppt", "::all_py"]
actions = [["ruff", "::all_py"]]

[tool.doitoml.tasks.lint.mypy]
doc = "Check python types with `mypy`"
file_dep = ["::ppt", "::all_py"]
actions = [["mypy", "::all_py"]]

[tool.doitoml.tasks.test.preflight]
doc = "Prepare for testing"
file_dep = ["::_actions"]
targets = ["::_ex_actions", "::_tmpl_actions"]
actions = [
  {py = "shutil:copy2", args = [
    "::_actions",
    "::_ex_actions",
  ]},
  {py = "shutil:copy2", args = [
    "::_actions",
    "::_tmpl_actions",
  ]},
]

[tool.doitoml.tasks.test.pytest.fast]
doc = "Run fast tests with pytest"
file_dep = ["::ppt", "::all_py", "::all_py_test", "::all_examples"]
actions = [["pytest", "-k", "not slow", "--cov-fail-under=0"]]

[tool.doitoml.tasks.test.pytest.full]
doc = "Run fast tests with pytest"
file_dep = ["::ppt", "::all_py", "::all_py_test", "::all_examples"]
task_dep = ["test:pytest:fast"]
actions = [["pytest"]]

[tool.doitoml.tasks.docs.sphinx]
doc = "Build documentation with `sphinx`"
file_dep = ["::py_src", "::ppt", "::all_md", "::all_ipynb", "::docs_py", "::docs_etc"]
actions = [["sphinx-build", "-W", "::sphinx_opts"]]
targets = ["::docs_buildinfo"]

[tool.doitoml.tasks.docs.check.links]
doc = "Check documentation with `pytest-check-links`"
file_dep = ["::docs_buildinfo", "::ppt"]
actions = [["pytest-check-links", "build/docs", "::check_links_opts"]]

[tool.doitoml.tasks.watch.docs]
doc = "Watch docs, rebuild on changes"
file_dep = ["::docs_buildinfo"]
actions = [["sphinx-autobuild", "::sphinx_opts", "--no-initial", "--watch=src"]]

[tool.doitoml.tasks.gen.schema]
doc = "build typings from jsonschema"
file_dep = ["src/doitoml/schema/v1.schema.toml"]
targets = ["src/doitoml/schema/v1.schema.json"]
actions = [["taplo", "get", "-o=json", "-f", "src/doitoml/schema/v1.schema.toml"]]
meta = {doitoml = {log = "src/doitoml/schema/v1.schema.json"}}
