"$schema" = "file://./src/doitoml/schema/_gen/_pyproject.v0.schema.json"

[build-system]
build-backend = "flit_core.buildapi"
requires = ["flit_core<4,>=3.7.1"]

[project]
name = "doitoml"
version = "0.2.1"
description = "Load declarative tasks for doit from TOML, JSON, YAML, and other files."
readme = "README.md"
authors = [{name = "doitoml contributors", email = "deathbeds@googlegroups.com"}]
requires-python = ">=3.8"
classifiers = [
  "License :: OSI Approved :: BSD License",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3",
]
dependencies = ["doit >=0.36.0", "typing_extensions", "tomli ; python_version<\"3.11\""]

[project.optional-dependencies]
all = ["doitoml[json-e]", "doitoml[jinja2]", "doitoml[jsonschema]", "doitoml[pyyaml]"]
json-e = ["json-e >=4"]
jinja2 = ["jinja2 >=3"]
jsonschema = ["jsonschema >=4"]
yaml = ["pyyaml >=5"]
test = [
  "build",
  "pytest-console-scripts",
  "pytest-cov",
  "pytest-html-report",
  "pytest-json-report",
  "pytest-xdist",
  "tomli-w",
]

[project.urls]
"Bug Tracker" = "https://github.com/deathbeds/doitoml/issues"
"Changelog" = "https://github.com/deathbeds/doitoml/blob/main/CHANGELOG.md"
"Documentation" = "https://doitoml.rtfd.io"
"PyPI" = "https://pypi.org/project/doitoml"
"Source" = "https://github.com/deathbeds/doitoml/tree/main"

[project.entry-points."doit.LOADER"]
doitoml = "doitoml.loaders:DoitomlLoader"

[project.entry-points."doitoml.actor.v0"]
py = "doitoml.actors.py:PyActor"

[project.entry-points."doitoml.config-parser.v0"]
doitoml-package-json = "doitoml.sources.json.package:PackageJsonParser"
doitoml-pyproject-toml = "doitoml.sources.toml.pyproject:PyprojectTomlParser"

[project.entry-points."doitoml.dsl.v0"]
doitoml-colon-colon-path = "doitoml.dsl:PathRef"
doitoml-colon-get = "doitoml.dsl:Getter"
doitoml-colon-glob = "doitoml.dsl:Globber"
doitoml-dollar-env = "doitoml.dsl:EnvReplacer"

[project.entry-points."doitoml.parser.v0"]
json = "doitoml.sources.json._json:JsonParser"
toml = "doitoml.sources.toml._toml:TomlParser"
yaml = "doitoml.sources.yaml._yaml:YamlParser"

[project.entry-points."doitoml.templater.v0"]
json-e = "doitoml.templaters.jsone:JsonE"
jinja2 = "doitoml.templaters.jinja2:Jinja2"

[project.entry-points."doitoml.updater.v0"]
config_changed = "doitoml.updaters.doit_tools:ConfigChanged"
run_once = "doitoml.updaters.doit_tools:RunOnce"
py = "doitoml.updaters.py:PyUpdater"

[project.entry-points."doitoml.skipper.v0"]
any = "doitoml.skippers.bools:Any_"
all = "doitoml.skippers.bools:All"
not = "doitoml.skippers.bools:Not"
exists = "doitoml.skippers.path:Exists"
platform = "doitoml.skippers.py:Platform"
py = "doitoml.skippers.py:Py"

[tool.pytest.ini_options]
cache_dir = "build/.cache/pytest"
script_launch_mode = "subprocess"
addopts = [
  # for humans
  "--html=build/reports/pytest.html",
  "--self-contained-html",
  "--cov-report=html:build/reports/htmlcov",
  "--cov-report=term-missing:skip-covered",
  "--color=yes",
  # for robots
  "--json-report",
  "--json-report-file=build/reports/pytest.json",
  # xdist
  "--dist=worksteal",
  # cov
  "--cov=doitoml",
  "--cov-branch",
  "--cov-context=test",
  "--no-cov-on-fail",
  # misc
  "--ff",
  "--tb=long",
]

[tool.coverage.html]
show_contexts = true

[tool.coverage.report]
exclude_lines = [
  "except ImportError as err:",
  "except MissingDependencyError as err:",
  "if TYPE_CHECKING:",
  "pragma: no cover",
]

[tool.coverage.run]
data_file = "build/reports/coverage/.coverage"

[tool.mypy]
cache_dir = "build/.cache/mypy"
sqlite_cache = true
# language settings
python_version = "3.8"
allow_redefinition = true
check_untyped_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
show_error_codes = true
warn_return_any = true
warn_unused_ignores = true
overrides = [
  {module = [
    "doit",
    "doit.*",
    "tomllib",
    "jsone",
  ], ignore_missing_imports = true},
]

[tool.doit]
backend = "sqlite3"
verbosity = 2
par_type = "thread"

[tool.doit.commands.list]
status = true
subtasks = true

[tool.ruff]
ignore = [
  "D211",
  "D213",
  # if it doesn't bother mypy...
  "ANN101",
  "ANN401",
  "PGH003",
  # keep 3.8 compat
  "UP006",
  "UP007",
  # harder to read
  "RUF015",
  # conflict with format
  "COM812",
  "ISC001",
]
cache-dir = "build/.cache/ruff"
select = [
  "A",
  "ANN",
  "ARG",
  "B",
  "BLE",
  "C4",
  "C90",
  "COM",
  "D",
  "DJ",
  "DTZ",
  "E",
  "EM",
  "ERA",
  "EXE",
  "F",
  # "FBT",
  "G",
  "I",
  "ICN",
  "INP",
  "ISC",
  "N",
  "NPY",
  "PD",
  "PGH",
  "PIE",
  "PL",
  "PT",
  "PTH",
  "PYI",
  "Q",
  "RET",
  "RSE",
  "RUF",
  "S",
  "SIM",
  "SLF",
  "T10",
  "T20",
  "TCH",
  "TID",
  # "TRY",
  "UP",
  "W",
  "YTT",
]
[tool.ruff.per-file-ignores]
"_actions.py" = ["S603", "S607", "T201", "S101", "PLR2004"]
"_config.py" = ["PLR0912", "C901"]
"_source.py" = ["BLE001"]
"constants.py" = ["N801"]
"docs/conf.py" = ["INP001", "A001"]
"dodo.py" = ["BLE001"]
"doit_tools.py" = ["ARG002"]
"doitoml.py" = ["PLR0913"]
"dsl.py" = ["ARG002"]
"entry_points.py" = ["BLE001"]
"jinja2.py" = ["ARG002"]
"test/**/*.py" = ["S101", "T201", "T203"]
"lite/*.py" = ["D205", "INP001", "E402", "ANN201", "D103", "T201", "ANN001", "D100"]
"_*schema.py" = ["PYI030", "E501"]

[tool.doitoml]
prefix = ""
config_paths = ["js/package.json", ":get::json::lite/jupyter_lite_config.json::doitoml"]
validate = true

[tool.doitoml.env]
DOITOML_SDIST = "doitoml-${DOITOML_VERSION}.tar.gz"
DOITOML_VERSION = ":get::toml::pyproject.toml::project::version"
DOITOML_WHEEL = "doitoml-${DOITOML_VERSION}-py3-none-any.whl"
PIP_DOWNLOAD_CACHE = "./build/.cache/pip"
RUST_LOG = "error"
SOURCE_DATE_EPOCH = ":get|0::json::build/source_date_epoch.json::SOURCE_DATE_EPOCH"
DOITOML_SKIP_CODEGEN = "0"
COV_FAIL_UNDER = "100"
JUPYTER_PLATFORM_DIRS = "1"
PYDEVD_DISABLE_FILE_VALIDATION = "1"

[tool.doitoml.tokens]
sphinx_opts = ["-b", "html", "docs", "build/docs"]
taplo_opts = [
  "--option=array_auto_collapse=true",
  "--option=compact_inline_tables=true",
  "--option=column_width=88",
]
check_links_opts = [
  "--check-links-ignore",
  "(https://|builtins|genindex)",
  "--links-ext=html",
  "--no-cov",
  "--check-anchors",
  "--html=build/reports/pytest-check-links.html",
  "-p",
  "no:importnb",
  "--json-report-file=build/reports/pytest-check-links.json",
  "--tb=no",
  "-n=10",
]
pym = ["python3", "-m"]
pip = ["::pym", "pip"]

[tool.doitoml.paths]
whl = ["dist/${DOITOML_WHEEL}"]
sdist = ["dist/${DOITOML_SDIST}"]
all_dist = ["::whl", "::sdist"]
dist_hash = ["dist/SHA256SUMS"]
docs_py = ["docs/conf.py"]
docs_etc = [":rglob::docs/_static::*.*", ":rglob::docs/_templates::*.*"]
all_misc_py = ["dodo.py", "_actions.py", "::all_py_test", "::docs_py"]
demo_py = [":glob::lite::*.py"]
all_py = ["::all_py_src", "::all_misc_py"]
all_ssort = ["::all_misc_py", "::demo_py", ":rglob::src::*.py::!_gen"]
py_src = [":rglob::src::*.py::!/_*v0*"]
all_py_src = [":rglob::src::*.py"]
docs_logo = ["docs/_static/img/logo.svg"]
all_ipynb = [
  ":rglob::docs::*.ipynb::!ipynb_checkpoints",
  ":rglob::lite::*.ipynb::!ipynb_checkpoints",
]
all_py_test = [":rglob::test::*.py"]
ppt = ["pyproject.toml"]
all_ppt = [
  "::ppt",
  ":glob::examples::*/pyproject.toml",
  "lite/pyproject.toml",
  ":glob::lite/playground-examples::*/pyproject.toml",
]
all_pj = [
  "js/package.json",
  ":glob::examples::*/package.json",
  ":glob::lite/playground-examples::*/package.json",
]
all_schema_toml_j2 = [":rglob::src/doitoml/schema/tmpl::*.schema.toml.j2"]
all_schema_toml = [":rglob::src/doitoml/schema/_gen::*.schema.toml"]
all_schema_json = [":rglob::src/doitoml/schema/_gen::*.schema.json"]
all_demo_toml = [":rglob::lite::*.toml::!.ipynb_checkpoints"]
all_toml = ["::all_ppt", "::all_schema_toml", "::all_demo_toml"]
all_py_dist = ["::ppt", "::py_src", "README.md", "LICENSE.txt"]
_actions = ["_actions.py"]
_ex_actions = ["examples/py-js-web/my_custom/_actions.py"]
_tmpl_actions = ["examples/template-json-e/_actions.py"]
all_examples = [
  ":glob::examples/py-js-web::*.json::*.toml::*.yml::*.py::*.js",
  ":rglob::examples/py-js-web/src::*.*",
  ":rglob::examples/py-js-web/js::*.*",
  "::all_ppt",
]
all_md = [":glob::.::*.md", ":rglob::docs::*.md::!ipynb_checkpoints"]
docs_buildinfo = ["build/docs/.buildinfo"]
bootstrap_txt = ["build/bootstrap.txt"]
schema_dir = ["src/doitoml/schema"]
schema_ppt_json = ["src/doitoml/schema/_gen/_pyproject.v0.schema.json"]
schema_pj_json = ["src/doitoml/schema/_gen/_jspackage.v0.schema.json"]
schema_toml = ["src/doitoml/schema/_gen/_doit.v0.schema.toml"]
schema_json = ["src/doitoml/schema/_gen/_doit.v0.schema.json"]
schema_py = ["src/doitoml/schema/_gen/_doit_v0_schema.py"]
source_date_epoch = ["build/source_date_epoch.json"]
env_binder = [".binder/environment.yml"]
env_docs = ["docs/environment.yml"]
env_test = [".github/environment.yml"]

[tool.doitoml.tasks.bootstrap]
meta = {doitoml = {log = "build/bootstrap.txt"}}
targets = ["::bootstrap_txt"]
actions = [
  [
    "::pip",
    "uninstall",
    "doitoml",
    "-y",
  ],
  [
    "::pip",
    "install",
    "-vv",
    "-e",
    ".",
    "--no-deps",
    "--ignore-installed",
    "--no-build-isolation",
  ],
  [
    "::pip",
    "list",
  ],
  [
    "::pip",
    "check",
  ],
]

[[tool.doitoml.tasks.bootstrap.uptodate]]
config_changed = [":get::toml::pyproject.toml::project::entry-points"]

[tool.doitoml.tasks.build.source_date_epoch]
doc = "Get SOURCE_DATE_EPOCH from git"
actions = [{py = {"_actions:source_date_epoch" = {}}}]
meta = {doitoml = {log = "::source_date_epoch"}}

[tool.doitoml.tasks.build.pypi]
doc = "Build distributions for PyPI"
file_dep = ["::all_py_dist", "::source_date_epoch"]
targets = ["::whl", "::sdist"]
actions = [["flit", "build"]]

[tool.doitoml.tasks.build.hashfile]
doc = "Generate a hashfile"
file_dep = ["::whl", "::sdist"]
targets = ["::dist_hash"]
actions = [
  {py = {"_actions:hash_files" = {kwargs = {hashfile = "::dist_hash", files = "::all_dist"}}}},
]

[tool.doitoml.tasks.fix.ssort]
doc = "Predictably order python source with `ssort`"
file_dep = ["::ppt", "::all_ssort"]
task_dep = ["js:fix:prettier"]
actions = [["ssort", "::all_ssort"]]

[tool.doitoml.tasks.fix.ruff]
doc = "Format python source with `ruff`"
file_dep = ["::ppt", "::all_py"]
task_dep = ["fix:ssort"]
actions = [["ruff", "--fix-only", "::all_py"], ["ruff", "format", "::all_py"]]

[tool.doitoml.tasks.fix.toml]
doc = "Format TOML with taplo"
file_dep = ["::all_toml"]
actions = [["taplo", "fmt", "::taplo_opts", "::all_toml"]]

[tool.doitoml.tasks.fix.ipynb]
doc = "Format notebooks with nbqa"
file_dep = ["::all_ipynb"]
actions = [
  [
    "nbstripout",
    "::all_ipynb",
  ],
  [
    "ruff",
    "--fix-only",
    "::all_ipynb",
  ],
  [
    "ruff",
    "format",
    "::all_ipynb",
  ],
]

[tool.doitoml.tasks.lint.py.ruff]
doc = "Check python syntax with `ruff`"
file_dep = ["::ppt", "::all_py"]
actions = [["ruff", "::all_py"]]

[tool.doitoml.tasks.lint.py.mypy]
doc = "Check python types with `mypy`"
file_dep = ["::ppt", "::all_py"]
actions = [["mypy", "::all_py"]]

[tool.doitoml.tasks.lint.ALL]
doc = "Lint everything"
task_dep = ["lint:py:*", "js:lint:*"]
actions = [["echo", "OK"]]

[tool.doitoml.tasks.test.preflight]
doc = "Prepare for testing"
file_dep = ["::_actions"]
targets = ["::_ex_actions", "::_tmpl_actions"]
actions = [
  {py = {"shutil:copy2" = {args = [
    "::_actions",
    "::_ex_actions",
  ]}}},
  {py = {"shutil:copy2" = {args = [
    "::_actions",
    "::_tmpl_actions",
  ]}}},
]

[tool.doitoml.tasks.test.unit]
doc = "Run unit tests with pytest"
file_dep = ["::ppt", "::all_py", "::all_py_test", "::all_examples", "::lite::config"]
task_dep = ["test:preflight"]
actions = [["pytest", "-n=auto", "-vv"]]

[tool.doitoml.tasks.test.full]
doc = "Run all tests with pytest"
file_dep = ["::ppt", "::all_py", "::all_py_test", "::all_examples"]
task_dep = ["test:unit"]
actions = [["pytest", "-n=auto", "-vv", "--cov-fail-under=${COV_FAIL_UNDER}"]]
meta = {doitoml = {env = {DOITOML_TEST_FULL_EXAMPLES = 1}}}

[tool.doitoml.tasks.docs.sphinx]
doc = "Build documentation with `sphinx`"
file_dep = [
  "::py_src",
  "::ppt",
  "::all_md",
  "::all_ipynb",
  "::docs_py",
  "::docs_etc",
  "::dist_hash",
  "::lite::build_targets",
]
actions = [["sphinx-build", "-W", "--color", "::sphinx_opts"]]
targets = ["::docs_buildinfo"]

[tool.doitoml.tasks.docs.check.links]
doc = "Check documentation with `pytest-check-links`"
file_dep = ["::docs_buildinfo", "::ppt"]
actions = [["pytest-check-links", "build/docs", "::check_links_opts"]]

[tool.doitoml.tasks.watch.docs]
doc = "Watch docs, rebuild on changes"
file_dep = ["::docs_buildinfo"]
actions = [["sphinx-autobuild", "::sphinx_opts", "--no-initial", "--watch=src"]]

[tool.doitoml.templates.jinja2.tasks.schema_template]
yaml = """
{% for schema_toml_j2 in paths[":all_schema_toml_j2"] %}
{% set stem = schema_toml_j2.split("/")[-1].replace(".toml.j2", "") %}
{% for state in ["doit", "pyproject", "jspackage"] %}
{% set schema_toml = paths[":schema_dir"][0] ~ "/_gen/_" ~ state ~ "." ~ stem ~ ".toml" %}
{{ state }}.{{ stem }}:
    meta: {doitoml: {skip: "${DOITOML_SKIP_CODEGEN}"}}
    doc: generate the TOML schema for {{ stem.split(".") | sort(False) | join(" ") }} {{ state }}
    file_dep: [{{ schema_toml_j2 }}]
    targets: [{{ schema_toml }}]
    actions:
        - py:
            _actions:template:
                args:
                  - {{ schema_toml_j2 }}
                  - {{ schema_toml }}
                kwargs:
                  state: {{ state }}
        - ["taplo", "fmt", "::taplo_opts", "{{ schema_toml }}"]
{% endfor %}
{% endfor %}
"""

[tool.doitoml.templates.jinja2.tasks.schema_gen]
yaml = """
{% for schema_toml in paths[":all_schema_toml"] %}
{% set stem = schema_toml.split("/")[-1].replace(".toml", "") %}
{% set schema_json = paths[":schema_dir"][0] ~ "/_gen/" ~ stem ~ ".json" %}
{{ stem }}:
    meta: {doitoml: {skip: "${DOITOML_SKIP_CODEGEN}"}}
    doc: generate the JSON schema for {{ stem.split(".") | sort(False) | join(" ") }}
    file_dep: [{{ schema_toml }}]
    targets: [{{ schema_json }}]
    actions:
        - py:
            _actions:toml2json:
                args: [{{ schema_toml }}, {{ schema_json }}]
{% endfor %}
"""

[tool.doitoml.templates.jinja2.tasks.lint_ppt]
yaml = """
{% for ppt in paths[":all_ppt"] %}
{% set stem = ppt.split("/")[-2] %}
{{ stem }}:
    doc: validate the pyproject.toml for {{ stem }}
    file_dep: [{{ ppt }}, "::all_schema_json"]
    actions:
      - py:
          _actions:validate:
              args: [{{ ppt }}, "::schema_ppt_json"]
{% endfor %}
"""

[tool.doitoml.templates.jinja2.tasks.lint_pj]
yaml = """
{% for pj in paths[":all_pj"] %}
{% set stem = pj.split("/")[-2] %}
{{ stem }}:
    doc: validate the package.json for {{ stem }}
    file_dep: [{{ pj }}, "::all_schema_json"]
    actions:
      - py:
          _actions:validate:
              args: [{{ pj }}, "::schema_pj_json"]
{% endfor %}
"""

[tool.doitoml.tasks.gen.types]
meta = {doitoml = {skip = "${DOITOML_SKIP_CODEGEN}"}}
doc = "build typings from JSON Schema"
file_dep = ["::schema_toml"]
targets = ["::schema_py"]
actions = [
  [
    "jsonschema-gentypes",
    "--python-version=3.8",
    "--json-schema",
    "::schema_json",
    "--python",
    "::schema_py",
  ],
  [
    "ruff",
    "--fix",
    "--quiet",
    "::schema_py",
  ],
  [
    "ruff",
    "format",
    "::schema_py",
  ],
]

[tool.doitoml.tasks.env.docs]
file_dep = ["::env_binder"]
targets = ["::env_docs"]
actions = [
  {py = {"_actions:replace_between" = {args = [
    "::env_binder",
    "::env_docs",
    "# run deps",
  ]}}},
  {py = {"_actions:replace_between" = {args = [
    "::env_binder",
    "::env_docs",
    "# build deps",
  ]}}},
  {py = {"_actions:replace_between" = {args = [
    "::env_binder",
    "::env_docs",
    "# docs deps",
  ]}}},
  {py = {"_actions:replace_between" = {args = [
    "::env_binder",
    "::env_docs",
    "# optional deps",
  ]}}},
  {py = {"_actions:replace_between" = {args = [
    "::env_binder",
    "::env_docs",
    "# demo deps",
  ]}}},
  {py = {"_actions:replace_between" = {args = [
    "::env_binder",
    "::env_docs",
    "# optional deps",
  ]}}},
]

[tool.doitoml.tasks.env.test]
file_dep = ["::env_binder"]
targets = ["::env_test"]
actions = [
  {py = {"_actions:replace_between" = {args = [
    "::env_binder",
    "::env_test",
    "# run deps",
  ]}}},
  {py = {"_actions:replace_between" = {args = [
    "::env_binder",
    "::env_test",
    "# optional deps",
  ]}}},
]
