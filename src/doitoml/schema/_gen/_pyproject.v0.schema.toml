
"$id" = "https://doitoml.rtfd.io/en/latest/schema/_pyprojectv0.schema.json#"
"$schema" = "https://json-schema.org/draft/2019-09/schema"

"$ref" = "#/definitions/pyproject"
description = "``doitoml`` and ``doit`` configuration for ``pyproject.toml``"

[definitions.config]
title = "doitoml schema"
description = "schema for ``doitoml`` configuration"
type = "object"
additionalProperties = false

[definitions.config.properties]
tokens = {"$ref" = "#/definitions/tokens", description = "named command tokens"}
env = {"$ref" = "#/definitions/env", description = "environment variables"}
paths = {"$ref" = "#/definitions/paths", description = "named paths"}
tasks = {"$ref" = "#/definitions/tasks", description = "named tasks"}
templates = {type = "object", description = "extensible task generators"}
config_paths = {type = "array", items = {type = "string"}, description = "additional doitoml config files, which may use ``get``"}
prefix = {type = "string", description = "a prefix to add to all tasks, tokens, and paths from this config file"}
validate = {type = "boolean", description = "whether to apply schema validation before and after all transforms"}
fail_quietly = {type = "boolean", description = "whether to ignore configuration errors"}

[definitions.array-of-strings]
type = "array"
items = {type = "string"}

[definitions.array-of-paths]
type = "array"
items = {type = "string", minLength = 1}

[definitions.tasks]
type = "object"
description = "doit tasks"
additionalProperties = {"$ref" = "#/definitions/task"}

[definitions.task]
title = "Task"
description = "a doit task"
type = "object"

[definitions.task.properties]
actions = {"$ref" = "#/definitions/actions", description = "actions to perform as strings, lists of tokens, or custom objects"}
calc_dep = {"$ref" = "#/definitions/array-of-paths"}
doc = {type = "string"}
file_dep = {"$ref" = "#/definitions/array-of-paths"}
meta = {"$ref" = "#/definitions/meta"}
name = {type = "string"}
targets = {"$ref" = "#/definitions/array-of-paths"}
title = {type = "string"}
uptodate = {"$ref" = "#/definitions/uptodates"}
verbosity = {"$ref" = "#/definitions/verbosity"}
watch = {"$ref" = "#/definitions/array-of-paths"}

[definitions.meta]
title = "Metadata"
type = "object"
properties = {doitoml = {"$ref" = "#/definitions/meta-doitoml"}}

[definitions.meta-doitoml]
title = "doitoml Metadata"
type = "object"
additionalProperties = false

[definitions.meta-doitoml.properties]
cwd = {type = "string"}
env = {"$ref" = "#/definitions/env"}
skip = {oneOf = [
  {type = "string"},
  {type = "number"},
  {type = "null"},
  {type = "object"},
]}
log = {"$ref" = "#/definitions/doitoml-log"}

[definitions.doitoml-log]
oneOf = [
  {type = "string"},
  {type = "array", items = {oneOf = [
    {type = "string"},
    {type = "null"},
  ]}},
]

[definitions.actions]
type = "array"
items = {"$ref" = "#/definitions/action"}

[definitions.action]
title = "action"
oneOf = [
  {"$ref" = "#/definitions/action-shell"},
  {"$ref" = "#/definitions/action-token"},
  {"$ref" = "#/definitions/action-actor"},
]

[definitions.uptodates]
type = "array"
items = {"$ref" = "#/definitions/uptodate"}

[definitions.uptodate]
title = "uptodate"
oneOf = [{type = "boolean"}, {type = "string"}, {type = "object"}, {type = "null"}]

[definitions.action-token]
title = "token action"
type = "array"
items = {type = "string"}

[definitions.action-shell]
title = "shell action"
type = "string"

[definitions.action-actor]
title = "actor action"
description = "a custom action"
type = "object"

[[definitions.action-actor.anyOf]]
description = "an uncharacterized custom action provided by an entry_point"
type = "object"

[definitions.tokens]
title = "command tokens"
description = "command tokens which may be expanded as paths"
type = "object"
additionalProperties = {"$ref" = "#/definitions/array-of-strings"}

[definitions.env]
title = "environment variables"
description = "environment variables shared among all tasks"
type = "object"
additionalProperties = {type = "string"}

[definitions.paths]
title = "path tokens"
description = "paths to expand and normalize, relative to the current working directory"
type = "object"
additionalProperties = {"$ref" = "#/definitions/array-of-paths"}

[definitions.verbosity]
type = "number"
description = "level of console output to show. 0 shows no output, 1 shows error output, 2 shows all output"
enum = [0, 1, 2]

[definitions.pyproject]
description = "a minimal partial python project that uses doit and/or doitoml"
type = "object"

[definitions.pyproject.properties]
tool = {"$ref" = "#/definitions/tool"}

[definitions.tool]
description = "the community namespace for non-build-related data"
type = "object"

[definitions.tool.properties]
doit = {"$ref" = "#/definitions/tool-doit"}
doitoml = {"$ref" = "#/definitions/tool-doitoml"}

[definitions.tool-doit]
description = "doit configuration"
type = "object"

[definitions.tool-doit.properties]
backend = {type = "string", description = "on-disk storage name for doit dependency data like file hashes"}
verbosity = {"$ref" = "#/definitions/verbosity"}
par_type = {type = "string", description = "the parallel approach for ``doit -n2`` or greater"}
commands = {"$ref" = "#/definitions/tool-doit-commands"}

[definitions.tool-doit-commands]
type = "object"
description = "configuration for built-in and custom doit subcommands"

[definitions.tool-doit-commands.properties.list]
description = "customization for the ``doit list`` subcommand"
type = "object"

[definitions.tool-doit-commands.properties.list.properties]
status = {type = "boolean", description = "whether to show the single-letter status code for a task"}
subtasks = {type = "boolean", description = "whether to show all subtasks (prefixed by ``:``)"}

[definitions.tool-doitoml]
"$ref" = "#/definitions/config"
